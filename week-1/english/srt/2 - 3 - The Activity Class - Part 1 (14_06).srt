1
00:00:08,880 --> 00:00:10,940
Hi.
I'm Adam Porter.

2
00:00:10,940 --> 00:00:17,060
And this is Programming Mobile
Applications For Android Handheld Systems.

3
00:00:19,660 --> 00:00:21,600
In our last lesson, we talked about

4
00:00:21,600 --> 00:00:25,250
the four fundamental components of Android
applications.

5
00:00:25,250 --> 00:00:28,730
And they were activities, services,

6
00:00:28,730 --> 00:00:31,450
broadcast receivers, and content
providers.

7
00:00:33,460 --> 00:00:35,410
Today we're going to take a deeper look

8
00:00:35,410 --> 00:00:38,090
at one of those components, the activity
class.

9
00:00:39,310 --> 00:00:41,670
I'll start by presenting the activity
class itself.

10
00:00:42,680 --> 00:00:46,830
Next, I'll discuss Android's task
backstack, which helps users

11
00:00:46,830 --> 00:00:51,530
easily navigate back and forth among the
activities they use.

12
00:00:51,530 --> 00:00:53,860
After that, I'll discuss the life cycle

13
00:00:53,860 --> 00:00:57,800
of activities, how they're created,
executed and terminated.

14
00:00:57,800 --> 00:00:58,650
And how

15
00:00:58,650 --> 00:01:03,520
Android manages and communicates these
life cycle phases and changes.

16
00:01:03,520 --> 00:01:05,530
To your applications.

17
00:01:05,530 --> 00:01:08,110
After that I'll discuss the API's and
patterns

18
00:01:08,110 --> 00:01:12,010
that you'll need to programatically to
start activities.

19
00:01:12,010 --> 00:01:14,840
And finally I'll finish up with a, with a
discussion

20
00:01:14,840 --> 00:01:19,940
of how Android activities handle device
and application configuration changes.

21
00:01:21,680 --> 00:01:22,700
So I've said before,

22
00:01:22,700 --> 00:01:26,980
activities are the primary class for
interacting with users.

23
00:01:26,980 --> 00:01:29,900
They're designed to provide a visual
interface through

24
00:01:29,900 --> 00:01:32,120
which the user can interact with the
application.

25
00:01:33,530 --> 00:01:38,060
And by convention, activities should be
modular in the sense that each activity

26
00:01:38,060 --> 00:01:43,280
should support a single focused thing that
the user can do with your application.

27
00:01:43,280 --> 00:01:47,730
And individual things, like viewing an
email message or showing a login screen.

28
00:01:48,830 --> 00:01:50,780
And if you follow this convention, then
you

29
00:01:50,780 --> 00:01:55,790
end up creating applications by stringing
together multiple activities.

30
00:01:55,790 --> 00:01:57,520
Each with a single purpose.

31
00:01:57,520 --> 00:02:01,640
That the user then navigates through and
Android helps users

32
00:02:01,640 --> 00:02:05,410
do this navigation in a couple of ways, by
supporting

33
00:02:05,410 --> 00:02:09,630
the concept of tasks, by providing a task
backstack for

34
00:02:09,630 --> 00:02:14,124
managing the specific activities through
which the user is navigating and

35
00:02:14,124 --> 00:02:18,880
by ensuring that activities are properly
suspended and resumed

36
00:02:18,880 --> 00:02:21,970
as they're pushed on and popped off the
task backstack.

37
00:02:23,280 --> 00:02:27,870
In Android a task is simply a set of
related activities.These related

38
00:02:27,870 --> 00:02:31,760
activities can, but don't have to be, part
of the same application.

39
00:02:31,760 --> 00:02:35,400
So tasks can span multiple applications.

40
00:02:35,400 --> 00:02:39,710
And most tasks start at the home screen.
So when a user launches an application

41
00:02:39,710 --> 00:02:43,440
from the home screen a new task is
normally started.

42
00:02:43,440 --> 00:02:46,110
And when a user hits the home button to
return back to

43
00:02:46,110 --> 00:02:50,820
the home screen the current task is, is at
least temporarily closed.

44
00:02:53,010 --> 00:02:57,160
The task backstack works as follows, when
an activity is launched it's

45
00:02:57,160 --> 00:03:02,380
pushed onto the task backstack normally as
part of the current task.

46
00:03:02,380 --> 00:03:05,890
When that activity is later destroyed, for
example, because the

47
00:03:05,890 --> 00:03:09,970
user hit the back button, because the
activity terminated itself

48
00:03:09,970 --> 00:03:14,520
programatically or even because Android
itself has decided to kill

49
00:03:14,520 --> 00:03:18,320
that activity in order to reap its
resources, then the activity

50
00:03:18,320 --> 00:03:20,420
is popped off the task backstack.

51
00:03:22,210 --> 00:03:24,010
Let's take a look at how this process
works.

52
00:03:25,520 --> 00:03:29,910
Now this graphic represents an activity
that's running on a device And

53
00:03:29,910 --> 00:03:34,100
depicts the state of the task backstack
while the application is running.

54
00:03:35,310 --> 00:03:38,980
The black pointer at the bottom indicates
the current snapshot.

55
00:03:40,160 --> 00:03:43,635
Now when this application is first
launched it starts up activity

56
00:03:43,635 --> 00:03:46,550
one, which is then pushed onto the top of

57
00:03:46,550 --> 00:03:49,950
the task backstack as the root of the
current task.

58
00:03:51,450 --> 00:03:56,450
Now as you can see, activity one has a
single button labeled Start Activity two.

59
00:03:56,450 --> 00:03:57,870
So the idea here is that if the

60
00:03:57,870 --> 00:04:01,370
user presses this button, Activity Two
will start.

61
00:04:02,580 --> 00:04:06,810
So let's say now that the user presses the
Activity Two button.

62
00:04:06,810 --> 00:04:09,780
At this point Activity One is suspended
and

63
00:04:09,780 --> 00:04:11,780
its state will be captured so that it can

64
00:04:11,780 --> 00:04:15,050
be restored later if the user returns back
to it.

65
00:04:16,190 --> 00:04:20,980
Next, Activity Two begins and Activity Two
is pushed onto the task backstack.

66
00:04:20,980 --> 00:04:26,080
Now similar to Activity One, Activity Two
has a single button.

67
00:04:26,080 --> 00:04:27,710
Labeled Start Activity Three.

68
00:04:28,790 --> 00:04:32,680
If the user presses this button, Activity
Three will start.

69
00:04:32,680 --> 00:04:35,230
So let's say that the user now presses

70
00:04:35,230 --> 00:04:37,520
the Start Activity Three button.

71
00:04:37,520 --> 00:04:41,608
At this point Activity Two will be
suspended, Activity Three will

72
00:04:41,608 --> 00:04:46,590
begin and Activity Three will be pushed on
to the task backstack.

73
00:04:46,590 --> 00:04:50,380
Now, let's say that the user has had
enough of Activity Three and

74
00:04:50,380 --> 00:04:54,950
hits the back button with the idea of
going back to Activity Two.

75
00:04:54,950 --> 00:05:00,140
At this point Android kills Activity Three
and pops it off the task backstack.

76
00:05:00,140 --> 00:05:04,470
Now because Activity Two is currently at
the top of

77
00:05:04,470 --> 00:05:09,960
the task backstack, Android will unsuspend
or resume that activity.

78
00:05:09,960 --> 00:05:13,920
Restoring it's state and bringing it back
into view on the device.

79
00:05:18,280 --> 00:05:21,050
Now as we saw with the task backstack
examples.

80
00:05:21,050 --> 00:05:26,280
Android activities come, and go, and come
again and go away for good.

81
00:05:26,280 --> 00:05:27,380
The have a lifecycle.

82
00:05:30,070 --> 00:05:32,330
And importantly for you as a developer
your

83
00:05:32,330 --> 00:05:36,070
applications are not really in control of
this lifecycle.

84
00:05:36,070 --> 00:05:39,820
Some lifecycle changes, for example,
depend on choices that the

85
00:05:39,820 --> 00:05:42,990
user makes, like pressing the back button
or the home button.

86
00:05:44,300 --> 00:05:47,430
Other lifecycle changes depend on Android
itself.

87
00:05:47,430 --> 00:05:50,840
For example, if your device is running low
on memory,

88
00:05:50,840 --> 00:05:54,420
Android can decide to kill activities that
are currently suspended.

89
00:05:54,420 --> 00:05:55,140
And it will do that

90
00:05:55,140 --> 00:05:59,380
knowing that it will need to recreate them
later if the user navigates back to them.

91
00:06:00,420 --> 00:06:02,170
So let's talk a bit more about

92
00:06:02,170 --> 00:06:05,990
the activity lifecycle and the particular
lifecycle changes.

93
00:06:05,990 --> 00:06:07,180
That activities go through.

94
00:06:08,230 --> 00:06:13,420
For example, once an activity is started,
it can be in a resumed or running state.

95
00:06:13,420 --> 00:06:16,070
And, while it's in this state, the
activity

96
00:06:16,070 --> 00:06:18,520
is visible and the user can interact with
it.

97
00:06:19,620 --> 00:06:20,210
An activity can

98
00:06:20,210 --> 00:06:22,090
also be paused.

99
00:06:22,090 --> 00:06:26,000
For instance, when a new activity starts
to pop-up in front of it.

100
00:06:26,000 --> 00:06:28,440
In this situation, the activity may still

101
00:06:28,440 --> 00:06:31,230
be partially visible, but the user can't
interact

102
00:06:31,230 --> 00:06:33,050
with it because the user will be

103
00:06:33,050 --> 00:06:35,560
interacting with a new activity that's
starting up.

104
00:06:37,600 --> 00:06:40,560
Prior to version 3.0, Android could
terminate

105
00:06:40,560 --> 00:06:43,330
activities once they went into the paused
state.

106
00:06:44,690 --> 00:06:47,630
Now finally, the activity can be stopped.

107
00:06:47,630 --> 00:06:49,250
And when it is stopped that activity is

108
00:06:49,250 --> 00:06:53,070
no longer visible and Android is free to
terminate.

109
00:06:53,070 --> 00:06:54,920
And this is important to reiterate.

110
00:06:54,920 --> 00:06:58,880
It can terminate stopped activities and it
does so knowing that

111
00:06:58,880 --> 00:07:02,770
it might need to recreate them later if
the users navigate

112
00:07:02,770 --> 00:07:03,350
back to them.

113
00:07:04,800 --> 00:07:07,140
Now, your activities will often need to
behave

114
00:07:07,140 --> 00:07:10,400
differently during different parts of
their life cycle.

115
00:07:10,400 --> 00:07:13,850
For instance, if your activity is showing
an animation, but then

116
00:07:13,850 --> 00:07:17,310
pops up a, partially transparent
dialogue-style

117
00:07:17,310 --> 00:07:19,680
activity in front of it, what

118
00:07:19,680 --> 00:07:23,220
you might want to pause the animation,
while the user responds to

119
00:07:23,220 --> 00:07:25,540
the dialogue, and then restart the

120
00:07:25,540 --> 00:07:28,960
animation, once that dialogue activity
finishes.

121
00:07:30,100 --> 00:07:35,290
In order to support scenarios like this,
Android announces lifecycle changes to

122
00:07:35,290 --> 00:07:40,200
your activity, by calling specific
lifecycle or template methods.

123
00:07:41,330 --> 00:07:42,910
And some of these methods are shown here.

124
00:07:44,380 --> 00:07:47,590
And each is named, as you can see, on
something rather.

125
00:07:47,590 --> 00:07:51,320
OnCreate, when the activity's about to be
created.

126
00:07:51,320 --> 00:07:54,770
OnStart, when the activity's about to
become visible.

127
00:07:54,770 --> 00:07:55,250
All the way

128
00:07:55,250 --> 00:07:59,685
to onDestroy when the activity's about to
be destroyed.

129
00:07:59,685 --> 00:08:02,905
And if you want to take some specific
action when your activity changes

130
00:08:02,905 --> 00:08:07,870
state,then you need to override one or
more of these methods in your activity.

131
00:08:09,110 --> 00:08:10,110
So let's take a look at how

132
00:08:10,110 --> 00:08:13,130
these different methods interrelate with
each other.

133
00:08:13,130 --> 00:08:15,200
Now, this graphic depicts the orders in

134
00:08:15,200 --> 00:08:17,920
which activity lifecycle methods can be
called.

135
00:08:17,920 --> 00:08:20,760
And the important thing to remember here,

136
00:08:20,760 --> 00:08:24,820
is that Android applications don't work
completely by themselves.

137
00:08:24,820 --> 00:08:26,640
Instead, there's a clear back and

138
00:08:26,640 --> 00:08:31,030
forth collaboration between your
application and Android.

139
00:08:31,030 --> 00:08:35,180
And you have to understand the rules of
this collaboration.

140
00:08:35,180 --> 00:08:38,000
If you want your Android applications to
function properly.

141
00:08:39,350 --> 00:08:43,880
So let's imagine a simple application with
one activity.

142
00:08:43,880 --> 00:08:45,790
That starts up,

143
00:08:45,790 --> 00:08:47,850
waits for a moment, and then exits.

144
00:08:48,960 --> 00:08:51,500
In this simple case when that application
is

145
00:08:51,500 --> 00:08:55,640
launched, Android will call the activity's
On Create method.

146
00:08:56,870 --> 00:08:59,867
Then, Android will call its onStart method

147
00:08:59,867 --> 00:09:03,188
and then onResume, after which the
activity's

148
00:09:03,188 --> 00:09:09,151
user interface will appear on the device's
screen and the user can interact with it.

149
00:09:09,151 --> 00:09:11,283
After a minute or so our example

150
00:09:11,283 --> 00:09:13,701
activity will begin to shut down.

151
00:09:13,701 --> 00:09:18,250
And at this point Android will call that
activity onPause method.

152
00:09:19,290 --> 00:09:22,527
Then onStop.
Then finally onDestroy.

153
00:09:22,527 --> 00:09:26,520
And at this point the activity is
completely dead.

154
00:09:27,650 --> 00:09:30,000
So, as you can see, the entire lifetime

155
00:09:30,000 --> 00:09:33,280
of the activity runs from the start of
onCreate.

156
00:09:33,280 --> 00:09:36,960
To the end of Ondestroy.

157
00:09:36,960 --> 00:09:42,060
Now when this simple activity started it
wasn't visible on the screen.

158
00:09:42,060 --> 00:09:44,830
At some point it became visible and at
some point

159
00:09:44,830 --> 00:09:48,150
later it became invisible as it was
removed from the screen.

160
00:09:49,230 --> 00:09:51,790
When activities are about to become
visible.

161
00:09:51,790 --> 00:09:56,910
Android calls the onStart sometimes the
onRestart method.

162
00:09:56,910 --> 00:09:58,300
When activities are about to become

163
00:09:58,300 --> 00:10:01,960
invisible, Android calls the onStop
method.

164
00:10:03,160 --> 00:10:06,630
And so you can think of the visible
lifetime of an activity as occurring

165
00:10:06,630 --> 00:10:13,390
between the start of calls to onStart and
the end of calls to onStop.

166
00:10:13,390 --> 00:10:17,560
And finally, while an activity is visible
on the screen, there are times when

167
00:10:17,560 --> 00:10:21,750
the user can interact with it, and there
are times when he or she can't.

168
00:10:21,750 --> 00:10:25,550
And, for example, this can happen when a
device goes to sleep.

169
00:10:25,550 --> 00:10:28,172
In that case the user can't interact with
the

170
00:10:28,172 --> 00:10:33,210
activity anymore even though it still is
the, the foreground activity.

171
00:10:33,210 --> 00:10:35,030
So when activities are about to be ready

172
00:10:35,030 --> 00:10:39,340
for user interaction Android calls the
onResume method.

173
00:10:39,340 --> 00:10:41,760
When activities are about to stop being
able to

174
00:10:41,760 --> 00:10:46,100
interact with the user, Android calls the
onPause method.

175
00:10:46,100 --> 00:10:49,340
And so you can think of the visible and in
foreground lifetime

176
00:10:49,340 --> 00:10:54,180
of an activity as occurring between the
start of calls to onResume and

177
00:10:54,180 --> 00:10:56,014
the end of calls to onPause.

178
00:10:58,580 --> 00:11:00,830
Let's walk through an, an example of this
based on

179
00:11:00,830 --> 00:11:04,750
the map location application that we saw
in earlier lessons.

180
00:11:06,390 --> 00:11:12,330
First, the user goes to home screen and
launches the map location application.

181
00:11:14,400 --> 00:11:17,910
This causes the map location activity to
start up.

182
00:11:17,910 --> 00:11:21,838
At which point Android calls Map
Location's onCreate method.

183
00:11:24,250 --> 00:11:26,510
OnCreate initializes the activity.

184
00:11:27,570 --> 00:11:30,349
And then Android continues by calling
onStart.

185
00:11:31,880 --> 00:11:36,790
And at this point Map Location is visible
but not yet ready for user interaction.

186
00:11:38,760 --> 00:11:44,415
And right now calls onResume.
After onResume completes Map Location

187
00:11:44,415 --> 00:11:49,300
will soon be both visible and ready for
user interaction.

188
00:11:49,300 --> 00:11:55,740
And at this point the user will normally
enter an address in the address box.

189
00:12:00,140 --> 00:12:03,250
Once the address has been entered the user
will normally

190
00:12:03,250 --> 00:12:07,650
press the show map button which will
launch Google Maps.

191
00:12:08,900 --> 00:12:14,380
Now as Google Maps starts up it will have
its own initial activity,

192
00:12:14,380 --> 00:12:19,015
that will go through its own lifecycle,
and receive its own lifecycle call backs.

193
00:12:19,015 --> 00:12:23,230
Let's continue looking at what's going on
with the map location activity.

194
00:12:23,230 --> 00:12:25,210
Now because Google maps is about to come

195
00:12:25,210 --> 00:12:26,960
into the foreground and cover up map

196
00:12:26,960 --> 00:12:30,980
location, the map location activity will
first receive

197
00:12:30,980 --> 00:12:34,170
a call to its onPause method, and soon

198
00:12:34,170 --> 00:12:38,050
after this.Map Location will no longer be
visible.

199
00:12:38,050 --> 00:12:41,210
An Android will call its onStop method.

200
00:12:43,290 --> 00:12:45,000
Now eventually Google Maps will appear on
the

201
00:12:45,000 --> 00:12:49,230
screen, and the user can interact with it.

202
00:12:49,230 --> 00:12:52,950
But at some point, the user will be done
with Google Maps and might,

203
00:12:52,950 --> 00:12:55,080
for example, choose return back to map

204
00:12:55,080 --> 00:12:59,160
location, for instance, to map a new
address.

205
00:12:59,160 --> 00:13:00,790
So let's assume that the user now hits

206
00:13:00,790 --> 00:13:04,380
the back button to return back to Map
Location.

207
00:13:04,380 --> 00:13:08,470
At this point Map Location must be brought
back into the foreground.

208
00:13:10,170 --> 00:13:15,740
So as Android does this it will first call
onRestart and then onStart.

209
00:13:16,950 --> 00:13:19,949
And soon after this an application will
again be visible.

210
00:13:21,080 --> 00:13:26,162
Next, Android will call Map Locations
onResume method, soon after which the

211
00:13:26,162 --> 00:13:31,130
Map Location activity will be both visible
and ready for user interaction.

212
00:13:33,260 --> 00:13:38,290
And finally when the user eventually loses
interest in application, he or she

213
00:13:38,290 --> 00:13:43,340
might hit the back button again, in this
case to end the application.

214
00:13:43,340 --> 00:13:45,470
At this point, Android will again go
through

215
00:13:45,470 --> 00:13:48,990
the process of removing Map Location from
the screen.

216
00:13:48,990 --> 00:13:53,247
It will first call onPause, then onStop,
and then

217
00:13:53,247 --> 00:13:58,791
this time it will call onDestroy, before
completely terminating

218
00:13:58,791 --> 00:14:00,450
the application.

