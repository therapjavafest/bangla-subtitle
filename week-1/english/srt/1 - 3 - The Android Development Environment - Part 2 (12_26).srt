1
00:00:08,880 --> 00:00:18,640
Hi I'm Adam Porter and this is Programming
Applications for Android Handheld Systems.

2
00:00:18,640 --> 00:00:21,610
Eclipse comes with a debugger that gives
developers powerful

3
00:00:21,610 --> 00:00:26,000
tools for examining the internal state of
a running application.

4
00:00:26,000 --> 00:00:28,540
And this can be useful of course when you
have a

5
00:00:28,540 --> 00:00:31,960
bug in your application and you're not
sure exactly what's causing it.

6
00:00:31,960 --> 00:00:34,540
So lets use the Eclipse debugger

7
00:00:34,540 --> 00:00:36,310
to examine an application.

8
00:00:38,570 --> 00:00:41,210
Here I'm showing a simple Android
application.

9
00:00:41,210 --> 00:00:43,000
That I've named The Answer.

10
00:00:44,740 --> 00:00:46,760
This app is supposed to show you

11
00:00:46,760 --> 00:00:49,840
the answer to life, the universe, and
everything.

12
00:00:49,840 --> 00:00:53,120
Which, as The Hitchhiker's Guide to the
Universe tells us, is 42.

13
00:00:53,120 --> 00:00:57,530
As you can see however, instead of
displaying

14
00:00:57,530 --> 00:01:01,070
42, this app says, we may never know.

15
00:01:01,070 --> 00:01:03,850
So, clearly, there's a bug in here
somewhere.

16
00:01:03,850 --> 00:01:06,430
Let's use the debugger to track that bug
down.

17
00:01:07,470 --> 00:01:09,380
So, here we are in Eclipse.

18
00:01:09,380 --> 00:01:14,260
First, I'll open up the Answer application
and show you its source code.

19
00:01:14,260 --> 00:01:18,060
Now, the truth is, that this is a pretty
silly program.

20
00:01:18,060 --> 00:01:22,140
And the bug will be fairly obvious.
Once you've looked at the code.

21
00:01:22,140 --> 00:01:25,230
But my goal here is to show you the
debugger, so just

22
00:01:25,230 --> 00:01:28,860
between us, let's pretend that we don't
really know what the bug is.

23
00:01:30,020 --> 00:01:33,020
Now you can see that there's an array
called answers.

24
00:01:33,020 --> 00:01:36,230
Through which the program will search,
looking for the answer 42.

25
00:01:36,230 --> 00:01:40,270
There's the on create method.

26
00:01:40,270 --> 00:01:44,400
That is the starting point when the class
is executed.

27
00:01:44,400 --> 00:01:48,950
Inside On Create there's a call to a
method called Find Answer.

28
00:01:48,950 --> 00:01:50,850
And Find Answer is listed down below.

29
00:01:52,760 --> 00:01:55,200
Now, Find Answer is supposed to search the
answers

30
00:01:55,200 --> 00:02:00,220
array and return the number 42 if it's in
there, or minus one if it's not.

31
00:02:01,680 --> 00:02:04,290
The program stores Find Answers return
value.

32
00:02:04,290 --> 00:02:07,350
And then uses it to compute a string
called Output.

33
00:02:07,350 --> 00:02:12,630
And then finally the program displays the
Output string.

34
00:02:12,630 --> 00:02:15,560
So, since I don't know were the bug is,
I'll,

35
00:02:15,560 --> 00:02:19,110
I decide to use the debugger to debug the
program.

36
00:02:19,110 --> 00:02:20,220
And the first thing I'll do then

37
00:02:20,220 --> 00:02:21,920
is to set a break point.

38
00:02:21,920 --> 00:02:26,230
That stops the program when it enters the
Oncreate method.

39
00:02:26,230 --> 00:02:31,000
Now instead of running the program, I'll
debug it by right clicking the project

40
00:02:31,000 --> 00:02:36,890
name, selecting debug as, and then
selecting Android application.

41
00:02:36,890 --> 00:02:38,130
I'll click okay.

42
00:02:38,130 --> 00:02:42,790
And when the application reaches Oncreate,
it stops.

43
00:02:42,790 --> 00:02:45,950
And shows me the debug view with the
current line highlighted

44
00:02:45,950 --> 00:02:47,670
in the source code.

45
00:02:47,670 --> 00:02:49,650
Now, at this point, I'll step through the

46
00:02:49,650 --> 00:02:52,860
code line by line, examining the program
state.

47
00:02:54,800 --> 00:02:57,680
I step forward, I select Step Over from

48
00:02:57,680 --> 00:03:00,630
the tool bar, which advances the program
one line.

49
00:03:02,870 --> 00:03:05,180
I'm now at the line that calls Find Answer

50
00:03:05,180 --> 00:03:08,010
and stores the return result in the
variable val.

51
00:03:09,800 --> 00:03:11,790
Once I step over this line, you will see
that

52
00:03:11,790 --> 00:03:16,050
the value of the variable val is now minus
ten.

53
00:03:16,050 --> 00:03:18,851
Which is already a problem.
It should have been 42.

54
00:03:19,990 --> 00:03:23,080
So the problem is certainly down there in
the Find Answer method.

55
00:03:23,080 --> 00:03:26,480
So let's look more closely at Find Answer.

56
00:03:26,480 --> 00:03:28,080
And to do that, I'll put a break

57
00:03:28,080 --> 00:03:31,775
point at Find Answer, and then restart the
application.

58
00:03:31,775 --> 00:03:39,119
Now this time, when

59
00:03:39,119 --> 00:03:45,167
the application

60
00:03:45,167 --> 00:03:49,055
stops at On

61
00:03:49,055 --> 00:03:53,110
Create.

62
00:03:53,110 --> 00:03:55,750
I'll hit the Step Over button which will
let the

63
00:03:55,750 --> 00:03:59,970
application continue executing until the
find answer break point is hit.

64
00:04:01,370 --> 00:04:04,590
I can step forward in this method and
examine the values

65
00:04:04,590 --> 00:04:08,270
of variables to determine that 42 is
indeed in the array.

66
00:04:16,550 --> 00:04:20,130
And that Find Answer sees it but considers
it the wrong answer.

67
00:04:22,050 --> 00:04:24,700
Anyway, as I'm sure you figured out long
ago,

68
00:04:24,700 --> 00:04:28,990
the problem is that I'm accidentally
checking for not equals.

69
00:04:28,990 --> 00:04:30,630
Rather than for equals equals.

70
00:04:31,640 --> 00:04:36,980
So I'll fix that and start over, and this
time we'll see the correct behavior.

71
00:04:36,980 --> 00:04:40,970
Now, just to make sure, let's go back and
fire up the answer.

72
00:04:45,500 --> 00:04:50,209
And yes, the answer to the life, the
universe, and everything, is again 42.

73
00:04:51,260 --> 00:04:54,550
Now I think debuggers help most when you
have a reasonably good idea of

74
00:04:54,550 --> 00:04:59,200
where your problem is, so you can focus in
on a few lines of code.

75
00:04:59,200 --> 00:05:02,140
But in many other situations that kind of
low level,

76
00:05:02,140 --> 00:05:07,080
instruction by instruction examination
that debuggers are so good at supporting.

77
00:05:07,080 --> 00:05:08,440
Is less helpful.

78
00:05:08,440 --> 00:05:11,160
Instead it may be easier to use more
general tools

79
00:05:11,160 --> 00:05:17,060
that instrument your system and let you
monitor its behavior as it runs over time.

80
00:05:17,060 --> 00:05:19,860
Android provides a number of these
monitoring tools,

81
00:05:19,860 --> 00:05:23,880
in its Dalvik Debug Monitor Service, or
DDMS.

82
00:05:25,970 --> 00:05:28,460
Today I'll talk about four of these tools.

83
00:05:28,460 --> 00:05:32,630
A File Explorer for viewing a device's
file system.

84
00:05:32,630 --> 00:05:36,670
Logcat, for logging and displaying run
time events.

85
00:05:36,670 --> 00:05:40,400
Traceview for displaying method execution
traces.

86
00:05:40,400 --> 00:05:44,510
And Hierarchyview for examining user
interface layouts.

87
00:05:44,510 --> 00:05:47,552
Let's look at these tools and see how you
access them from Eclipse.

88
00:05:47,552 --> 00:05:50,366
[BLANK AUDIO] First,

89
00:05:50,366 --> 00:05:56,932
let's open the DDMS perspective which
exposes a number of

90
00:05:56,932 --> 00:06:05,110
panes and buttons who are accessing the
different DDMS tools.

91
00:06:05,110 --> 00:06:09,060
We now see device pane that shows the
devices that are currently connected.

92
00:06:09,060 --> 00:06:13,890
And shows a list of debuggable processes
running on these devices.

93
00:06:15,710 --> 00:06:18,370
The first tool we'll look at is the File
Explorer.

94
00:06:19,380 --> 00:06:23,530
This view shows, shows you the files on
your file system.

95
00:06:23,530 --> 00:06:28,630
For example, here we see that this device
has a slash data, slash data directory.

96
00:06:28,630 --> 00:06:32,660
In which applications can store their
persistent data.

97
00:06:32,660 --> 00:06:34,960
This device also has an external memory
card.

98
00:06:38,780 --> 00:06:42,758
And there's some directories there for
storing music and movies and other things.

99
00:06:42,758 --> 00:06:46,739
The next pane I'll talk about shows the
Logcat view.

100
00:06:48,010 --> 00:06:49,890
Android logs many events by default.

101
00:06:50,950 --> 00:06:53,230
That is as the software runs, it spits

102
00:06:53,230 --> 00:06:55,810
out information about the things that are
happening

103
00:06:55,810 --> 00:06:58,680
on the device, and this information is
stored,

104
00:06:58,680 --> 00:07:01,910
it can be displayed in the Logcat view.

105
00:07:01,910 --> 00:07:03,780
Android also provides methods that

106
00:07:03,780 --> 00:07:05,790
let developers log their own information.

107
00:07:08,630 --> 00:07:11,180
Another DDMS tool is Traceview.

108
00:07:11,180 --> 00:07:15,250
Traceview allows you to trace the methods
that your application calls.

109
00:07:19,985 --> 00:07:23,160
Let's do this for the answer application
that I showed earlier.

110
00:07:23,160 --> 00:07:25,910
So this is the source code for the
application.

111
00:07:25,910 --> 00:07:28,361
And to simplify my demonstration, I'll
first put

112
00:07:28,361 --> 00:07:30,230
a break point in the On Create method.

113
00:07:30,230 --> 00:07:33,500
And now I'll start debugging the
application.

114
00:07:45,900 --> 00:07:48,880
Now, as you can see, it stopped at the
break point.

115
00:07:48,880 --> 00:07:51,670
And now, I want to start profiling.

116
00:07:51,670 --> 00:07:54,050
So I'll open the DDMS View.

117
00:07:54,050 --> 00:07:59,693
And click on the button that says

118
00:07:59,693 --> 00:08:05,745
Start Profiling.
And now, I'll

119
00:08:05,745 --> 00:08:11,307
return back to the debug view and

120
00:08:11,307 --> 00:08:15,870
resume the application.

121
00:08:22,310 --> 00:08:26,470
I'll let the program run for awhile and
now I'll return to the DDMS

122
00:08:26,470 --> 00:08:30,990
view and press the same button as before,
this time to stop the profiling.

123
00:08:37,550 --> 00:08:39,720
At this point, Traceview will process the

124
00:08:39,720 --> 00:08:43,030
trace information and show it to me
graphically.

125
00:08:43,030 --> 00:08:46,500
The Traceview display shows two panels.

126
00:08:46,500 --> 00:08:48,400
One is a timeline view showing each

127
00:08:48,400 --> 00:08:51,880
method, each method culls sequence and
duration,

128
00:09:00,990 --> 00:09:03,010
The other is the profile view, which show

129
00:09:03,010 --> 00:09:07,850
statistics and other information about
each culled method.

130
00:09:07,850 --> 00:09:09,840
Let's look for our old friend Find Answer.

131
00:09:11,180 --> 00:09:14,350
When I click on Find Answer in the profile
view I

132
00:09:14,350 --> 00:09:17,580
can see where it was called up in the
Timeline view.

133
00:09:17,580 --> 00:09:19,407
And now I can zoom in on the

134
00:09:19,407 --> 00:09:23,873
timeline to see more information and
surrounding context.

135
00:09:23,873 --> 00:09:28,026
[BLANK_AUDIO]

136
00:09:28,026 --> 00:09:30,586
And if I want to be more precise in my
profiling,

137
00:09:30,586 --> 00:09:35,180
Android also allows me to insert
statements directly into the program.

138
00:09:35,180 --> 00:09:40,210
That enable targeted tracing, and doing
this requires

139
00:09:40,210 --> 00:09:43,110
that you set some permissions, however,
for your application.

140
00:09:43,110 --> 00:09:45,180
And we haven't talked about permissions
yet, but

141
00:09:45,180 --> 00:09:46,810
we'll talk about them in a later lesson.

142
00:09:47,830 --> 00:09:53,130
And finally on my Mac if I Cmd+Click on
find answer in the Profile pane,

143
00:09:53,130 --> 00:09:55,980
the clips will take me to the file
containing that method.

144
00:09:57,860 --> 00:10:02,580
The last tool I'll talk about today is the
UI hierarchy view.

145
00:10:02,580 --> 00:10:04,300
This tool allows you to analyze your

146
00:10:04,300 --> 00:10:08,470
application's user interface and
understand how it's organized.

147
00:10:08,470 --> 00:10:11,890
For example, let's look again at the Hello
Android application.

148
00:10:16,330 --> 00:10:19,335
First, let's run the Hello Android
application.

149
00:10:19,335 --> 00:10:25,930
And once it's up and running.

150
00:10:25,930 --> 00:10:36,250
We'll go to the Menu bar and select
Window.

151
00:10:36,250 --> 00:10:41,740
Then select Open Perspective.
Then select Hierarchy View.

152
00:10:41,740 --> 00:10:45,350
Now if you don't see it, try selecting
Other and searching there instead.

153
00:10:45,350 --> 00:10:49,530
Now once the Hierarchy Viewer starts,
we'll go

154
00:10:49,530 --> 00:10:53,170
to the Window panel and double click the
entry

155
00:10:53,170 --> 00:10:56,620
corresponding to the Hello Android
application, it's the

156
00:10:56,620 --> 00:10:58,321
one that has the words, Hello Android in
it.

157
00:10:58,321 --> 00:11:02,250
Double clicking on this entry will bring
up

158
00:11:02,250 --> 00:11:06,250
a graphical representation of Hello
Android's user interface,

159
00:11:07,250 --> 00:11:11,160
which like most user interfaces is
organized in a hierarchy.

160
00:11:11,160 --> 00:11:13,140
For instance, there's an outermost
application

161
00:11:13,140 --> 00:11:15,629
window, which holds the entire user
interface.

162
00:11:20,610 --> 00:11:23,000
It contains two children, a title bar,

163
00:11:31,800 --> 00:11:34,580
and the large rectangular body of the
application.

164
00:11:34,580 --> 00:11:37,590
Each of these in turn contain further
elements.

165
00:11:37,590 --> 00:11:39,390
Here, I'll click on the outermost window.

166
00:11:39,390 --> 00:11:44,620
And I can in, inspect detailed information
about that window.

167
00:11:44,620 --> 00:11:47,190
Such as its layout parameters which, for
example,

168
00:11:47,190 --> 00:11:49,660
shows how big the window is in pixels.

169
00:11:50,800 --> 00:11:53,330
The region occupied by each element is
shown here

170
00:11:53,330 --> 00:11:56,060
in the layout view, in the bottom right
corner.

171
00:11:57,190 --> 00:12:01,390
And the same information is also available
for the title bar, and

172
00:12:01,390 --> 00:12:04,600
the same for the body, and the text to you
that it contains.

173
00:12:11,760 --> 00:12:14,980
Now that's all for today's lesson on the
Android development environment.

174
00:12:14,980 --> 00:12:16,940
Please join me next time when we'll

175
00:12:16,940 --> 00:12:21,240
discuss the fundamental building blocks of
Android applications.

176
00:12:21,240 --> 00:12:21,700
Thank you.

