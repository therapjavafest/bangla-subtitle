1
00:00:01,394 --> 00:00:08,930
[BLANK_AUDIO]

2
00:00:08,930 --> 00:00:11,685
Hi, I'm Adam Porter, and this is

3
00:00:11,685 --> 00:00:17,060
Programming Mobile Applications for
Android Handheld Systems.

4
00:00:18,880 --> 00:00:22,000
Today we're going to talk about the
Android development enviroment.

5
00:00:22,000 --> 00:00:26,170
An integrated set of tools to help you
create your own Android applications.

6
00:00:27,500 --> 00:00:31,230
In our last lesson, I introduced you to
the Android platform itself.

7
00:00:31,230 --> 00:00:33,940
I talked about how the Android platform is
a software stack

8
00:00:33,940 --> 00:00:37,590
for building and running mobile
applications.

9
00:00:37,590 --> 00:00:41,910
And if you've used an Android device, to
write email, to take photos, to get

10
00:00:41,910 --> 00:00:44,980
directions, to play games and so on,

11
00:00:44,980 --> 00:00:47,670
then you've seen the Android platform in
action.

12
00:00:47,670 --> 00:00:50,230
And you have a good idea about what it can
do.

13
00:00:50,230 --> 00:00:52,580
So, the next question then, is how do we

14
00:00:52,580 --> 00:00:56,760
use the Android platform to write our own
Android apps?

15
00:00:56,760 --> 00:00:59,010
Well, one part of the answer, is that you
need to learn

16
00:00:59,010 --> 00:01:01,740
the details of the Android platform
itself.

17
00:01:01,740 --> 00:01:03,460
And we'll do that throughout this class.

18
00:01:04,480 --> 00:01:07,410
Another part of the answer, though, is
that you need to learn and

19
00:01:07,410 --> 00:01:12,160
master the tools that will allow you to
make use of the platform.

20
00:01:12,160 --> 00:01:14,490
In order to create those new applications.

21
00:01:14,490 --> 00:01:16,910
And that's what we're going to focus on
today.

22
00:01:16,910 --> 00:01:20,060
Now the tools that I'm talking about are
called the Android development

23
00:01:20,060 --> 00:01:24,230
environment, and you should think of them
as your workbench for creating

24
00:01:24,230 --> 00:01:29,550
Android applications, and like any skilled
craftsperson, the more comfortable you are

25
00:01:29,550 --> 00:01:34,820
with your tools, the easier it's going to
be to produce top quality work.

26
00:01:36,070 --> 00:01:39,172
Now in this lesson, we'll cover several
topics.

27
00:01:39,172 --> 00:01:43,620
First, I'll explain how you can set up
your development environment including

28
00:01:43,620 --> 00:01:46,740
installing the Android SDK, the Eclipse

29
00:01:46,740 --> 00:01:50,590
integrated development environment or IDE,
and

30
00:01:50,590 --> 00:01:53,060
the Android developer tools.

31
00:01:53,060 --> 00:01:56,100
Then I'll show you the Eclipse IDE in
action.

32
00:01:56,100 --> 00:01:59,370
And we'll create a very simple Android
application.

33
00:02:00,780 --> 00:02:04,370
After that, I'll show you some specific
tools; such as, the Android

34
00:02:04,370 --> 00:02:06,200
emulator which allows you to run

35
00:02:06,200 --> 00:02:09,800
Android applications without needing a
physical device.

36
00:02:09,800 --> 00:02:11,570
And then I'll show you how to use the
eclipse

37
00:02:11,570 --> 00:02:15,730
debugger to help you diagnose any eventual
problems that you might

38
00:02:15,730 --> 00:02:17,750
have in your application.

39
00:02:17,750 --> 00:02:19,950
And lastly, I'll show you a variety of
other

40
00:02:19,950 --> 00:02:23,540
tools designed to help you further perfect
your applications.

41
00:02:23,540 --> 00:02:29,520
And before you get started make sure that
you have a supported operating system.

42
00:02:29,520 --> 00:02:34,610
For Windows, these include Windows XP,
Windows Vista, and Windows 7.

43
00:02:34,610 --> 00:02:39,405
For Mac you'll need Mac OS X 10, 10.5.8 or
later.

44
00:02:39,405 --> 00:02:43,140
Running on an Intel-based CPU.

45
00:02:43,140 --> 00:02:45,080
Several Linux distributions will work as
well.

46
00:02:46,200 --> 00:02:49,030
Please see the Android developers' website
for more information.

47
00:02:49,030 --> 00:02:52,280
Now, you should also make sure that you
have

48
00:02:52,280 --> 00:02:58,026
the Java Development Kit Version six, or
the JDK6 installed.

49
00:02:58,026 --> 00:03:02,580
And be aware that JDK6 is not the latest
version of Java, so

50
00:03:02,580 --> 00:03:06,970
some of you may have version seven, but
that's not fully supported by Android.

51
00:03:08,020 --> 00:03:10,970
Again, check the following website for
more information.

52
00:03:13,030 --> 00:03:14,620
So now we're ready to get started.

53
00:03:14,620 --> 00:03:21,160
So first download and install the Android
Developer Tools or ADT Bundle.

54
00:03:21,160 --> 00:03:24,250
Now I suggest you do this right now and
that way you can

55
00:03:24,250 --> 00:03:28,640
follow along with my examples while you
watch the rest of this lesson.

56
00:03:28,640 --> 00:03:31,990
You can find the ADT Bundle at the URL
shown here.

57
00:03:33,130 --> 00:03:34,400
Now I'll also point out that Google has

58
00:03:34,400 --> 00:03:39,260
recently released a new IDE, called
Android Studio,

59
00:03:39,260 --> 00:03:41,010
which they expect will ultimately become

60
00:03:41,010 --> 00:03:45,000
the preferred IDE for doing Android
development.

61
00:03:45,000 --> 00:03:48,765
However, since Android Studio is still
currently in a preview or

62
00:03:48,765 --> 00:03:51,500
pre-released state, I'm going to do my

63
00:03:51,500 --> 00:03:54,610
demonstrations for this class using
Eclipse.

64
00:03:54,610 --> 00:03:59,170
But you're free to, to use Eclipse or to
use Android Studio, as you wish.

65
00:03:59,170 --> 00:04:03,040
Now, the ADT Bundle provides you with
several things.

66
00:04:03,040 --> 00:04:04,530
First, it has the latest

67
00:04:04,530 --> 00:04:06,580
Android platform including the latest

68
00:04:06,580 --> 00:04:11,620
libraries, reusable software, tools, and
documentation.

69
00:04:11,620 --> 00:04:16,600
It also includes the eclipse IDE and
Android specific plugins.

70
00:04:16,600 --> 00:04:20,630
It has additional tools that support
developing, running, testing,

71
00:04:20,630 --> 00:04:24,260
and debugging your Android apps and it has
the latest

72
00:04:24,260 --> 00:04:26,280
system image for the emulator so that you
can

73
00:04:26,280 --> 00:04:29,580
run and debug your Android applications
without needing to have

74
00:04:29,580 --> 00:04:30,650
an actual device.

75
00:04:32,690 --> 00:04:35,460
In our last lesson we talked about the
Android platform.

76
00:04:35,460 --> 00:04:39,330
So, today we'll talk about the other three
elements, one by one.

77
00:04:39,330 --> 00:04:41,100
But before we do that, let's look at

78
00:04:41,100 --> 00:04:45,000
a very simple Android application called,
Hello Android.

79
00:04:45,000 --> 00:04:48,090
And I'll be referring back to this
application throughout the lesson.

80
00:04:49,280 --> 00:04:49,780
Now

81
00:04:51,500 --> 00:04:58,060
here I'm showing my phone's home screen.
First, I'll click on the launch here icon.

82
00:04:58,060 --> 00:05:01,090
And then I'll click on the Hello Android
icon to launch

83
00:05:01,090 --> 00:05:08,130
the application, the application starts,
and displays the words, Hello world.

84
00:05:08,130 --> 00:05:12,450
Now that's about as simple as it gets, but
let's walk through the process of writing

85
00:05:12,450 --> 00:05:18,390
the Hello Android application, using the
eclipse IDE.

86
00:05:18,390 --> 00:05:21,940
Now this is the Eclipse IDE opened to full
screen.

87
00:05:21,940 --> 00:05:25,660
Let's start by creating a new Android
application project.

88
00:05:25,660 --> 00:05:27,040
Now one way to do that is to go to

89
00:05:27,040 --> 00:05:32,640
the File menu, then New, and then select
Android Application Project.

90
00:05:33,770 --> 00:05:35,950
Once you do this, you'll see a series of

91
00:05:35,950 --> 00:05:41,890
dialogue boxes that ask you for
information about this application.

92
00:05:41,890 --> 00:05:43,415
On the first screen enter

93
00:05:43,415 --> 00:05:45,990
Hello Android, all one word for the

94
00:05:45,990 --> 00:05:48,720
application name, and for the project
name.

95
00:05:49,770 --> 00:05:52,365
Where it asks for the package name, I'm
using

96
00:05:52,365 --> 00:05:57,150
course.examples.helloandroid but you could
use something else if you'd like.

97
00:05:58,420 --> 00:06:02,550
Now go ahead and leave the other boxes
alone, and hit Next.

98
00:06:02,550 --> 00:06:07,270
Now for this exercise, let's just click
through the next few screens.

99
00:06:07,270 --> 00:06:08,490
They control application

100
00:06:08,490 --> 00:06:11,370
characteristics that we haven't discussed
yet, but we'll

101
00:06:11,370 --> 00:06:13,500
come back to them when time is right.

102
00:06:15,170 --> 00:06:17,100
Once you arrive at the screen titled,
Blank

103
00:06:17,100 --> 00:06:19,790
Activity, go ahead and hit the Finish
button.

104
00:06:21,575 --> 00:06:26,050
Eclipse will generate the application's
source code and layout files.

105
00:06:26,050 --> 00:06:32,890
And once it's finished, you will open a
file called activity_main.xml.

106
00:06:32,890 --> 00:06:33,820
This file defines

107
00:06:33,820 --> 00:06:39,170
the application's user interface layout.
And based on this file, Eclipse

108
00:06:39,170 --> 00:06:44,900
will show you whatever it can about how
this application will look when it runs.

109
00:06:44,900 --> 00:06:47,060
As you can see here, Hello Android will

110
00:06:47,060 --> 00:06:51,740
display a simple screen with the words,
hello world.

111
00:06:51,740 --> 00:06:54,980
Let's also take a quick look at the source
code for this application.

112
00:06:54,980 --> 00:07:00,230
Let's open up the file main activity.java.

113
00:07:00,230 --> 00:07:03,920
Now that opens up an editor window,
showing the contents of the file.

114
00:07:03,920 --> 00:07:08,210
And I won't talk too much about the source
code right now, except

115
00:07:08,210 --> 00:07:13,010
to say that when this application runs;
the on create method of this

116
00:07:13,010 --> 00:07:18,070
class will be called and that code will
set up and display the

117
00:07:18,070 --> 00:07:23,050
application's user interface screen, so
let's run this code to see what happens.

118
00:07:24,460 --> 00:07:25,750
One way of running an application

119
00:07:25,750 --> 00:07:28,070
is to, click on the project in the File

120
00:07:28,070 --> 00:07:33,280
pane, then select Run As, and then select
Android Application.

121
00:07:34,300 --> 00:07:39,020
Now a dialogue box pops up, asking where
to run the application?

122
00:07:39,020 --> 00:07:42,250
In this case, I only have my phone
connected, so I'll choose that.

123
00:07:42,250 --> 00:07:48,290
And now, we wait while the application is
copied to the phone, and then run.

124
00:07:50,460 --> 00:07:51,610
And there you have it.

125
00:07:51,610 --> 00:07:56,250
Your first Android application, running on
a real device.

126
00:07:56,250 --> 00:08:00,430
Now, the phone I use is the Nexus Four.

127
00:08:00,430 --> 00:08:03,730
Let's suppose I'd like to test this out on
a different phone.

128
00:08:05,010 --> 00:08:09,190
Let's say the Galaxy Nexus but I don't
have one of those phones.

129
00:08:09,190 --> 00:08:11,750
In that case rather than run out and buy a
Galaxy

130
00:08:11,750 --> 00:08:16,290
Nexus, I can run Hello Android on an
emulated Galaxy Nexus

131
00:08:16,290 --> 00:08:18,210
using the Android Emulator.

132
00:08:18,210 --> 00:08:20,310
And in order to do that, I first need to

133
00:08:20,310 --> 00:08:24,760
create the emulated phone instance that
I'll use inside the emulator.

134
00:08:24,760 --> 00:08:30,120
Now these emulated phone instances are
called virtual devices.

135
00:08:30,120 --> 00:08:32,320
Let's go back to the clips, and set

136
00:08:32,320 --> 00:08:35,800
up a virtual device corresponding to a
Galaxy Nexus.

137
00:08:42,380 --> 00:08:47,520
So now we're back in Eclipse.
First, I'll go up to the tool bar, and

138
00:08:47,520 --> 00:08:52,590
launch the Android virtual device manager,
it might be a bit hard

139
00:08:52,590 --> 00:08:57,569
to see here, but look for the icon, that
shows an android in a box.

140
00:08:58,870 --> 00:09:02,820
Clicking that will display a dialogue box
showing existing

141
00:09:02,820 --> 00:09:06,217
virtual devices and allowing you to make
new ones.

142
00:09:06,217 --> 00:09:07,742
Let's click on the New button

143
00:09:07,742 --> 00:09:14,100
which will bring up another dialogue box.
Under AVD name or Android Virtual Device

144
00:09:14,100 --> 00:09:22,240
name you can give this virtual device any
name you want.

145
00:09:22,240 --> 00:09:26,822
Now go to the Device pull down menu and
select Galaxy Nexus, that will

146
00:09:26,822 --> 00:09:31,707
fill in a bunch of information for you
such as the target platform to use.

147
00:09:31,707 --> 00:09:33,163
In this case let's

148
00:09:33,163 --> 00:09:35,175
use Android 4.2.2.

149
00:09:35,175 --> 00:09:40,330
I'm going to add some memory to the SD
card just in case we may need it later.

150
00:09:40,330 --> 00:09:41,180
And then I'll hit okay.

151
00:09:42,650 --> 00:09:44,690
You can see the virtual device you just
created.

152
00:09:46,770 --> 00:09:49,190
Click on that and then click Start.

153
00:09:49,190 --> 00:09:53,480
Now go ahead and click through to the next
screen.

154
00:09:53,480 --> 00:09:58,179
And then we'll need to wait several
minutes while the virtual device boots up.

155
00:09:59,220 --> 00:10:00,490
I'll come back later when it's done.

156
00:10:03,570 --> 00:10:06,600
Okay, we're almost there, just a few
seconds more.

157
00:10:08,520 --> 00:10:12,220
And there's the home screen of an emulated
Galaxy Nexus.

158
00:10:13,510 --> 00:10:16,670
Now that the Galaxy Nexus is running,
let's return to Eclipse.

159
00:10:18,100 --> 00:10:20,410
And this time, I'll install and run hello
android

160
00:10:20,410 --> 00:10:24,430
on the emulated phone rather than on a
physical device.

161
00:10:24,430 --> 00:10:27,740
So just like we did before, let's click on
the project name.

162
00:10:27,740 --> 00:10:29,500
Select Run As, and then

163
00:10:29,500 --> 00:10:34,540
select Android application.
A dialogue box up, box

164
00:10:34,540 --> 00:10:39,490
pops up, showing us connected devices.
And this time, instead of selecting an

165
00:10:39,490 --> 00:10:44,550
actual device, select the virtual device
that you just started and click okay.

166
00:10:45,620 --> 00:10:49,690
Eclipse will install the application on
the virtual device and then run it.

167
00:10:51,320 --> 00:10:55,600
And here you go, Hello Android, running on
the emulator.

168
00:10:55,600 --> 00:10:57,960
Today I've shown you that you can build
applications like

169
00:10:57,960 --> 00:11:02,650
Hello Android on an actual device, inside
an emulator or both.

170
00:11:02,650 --> 00:11:04,955
And there are pluses and minuses with each
of these

171
00:11:04,955 --> 00:11:10,010
approaches; for example, the benefits of
using an emulator include;

172
00:11:10,010 --> 00:11:12,410
that the emulator is cheaper, you don't
have to buy

173
00:11:12,410 --> 00:11:15,100
all the devices that you may want to test
on.

174
00:11:15,100 --> 00:11:17,500
Also, unlike the phone, the emulator

175
00:11:17,500 --> 00:11:21,040
allows you to easily configure hardware
characteristics,

176
00:11:21,040 --> 00:11:24,090
like the size of the sd card, the display

177
00:11:24,090 --> 00:11:27,460
size, whether the device has a trackball,
and so on.

178
00:11:28,510 --> 00:11:33,110
Also, many modifications that you make or
any of the modifications that you make.

179
00:11:33,110 --> 00:11:36,970
Are isolated to this emulated device, so
you don't have to worry

180
00:11:36,970 --> 00:11:41,430
that your testing will mess up your phone
or its data or configuration.

181
00:11:42,530 --> 00:11:46,820
Now on the other hand, emulators have some
downsides as well.

182
00:11:46,820 --> 00:11:49,995
For example, the Android Emulator is
pretty slow and

183
00:11:49,995 --> 00:11:52,940
that can be frustrating when you're trying
to rapidly experiment

184
00:11:52,940 --> 00:11:55,090
and tune your app and you have to wait for

185
00:11:55,090 --> 00:11:57,630
the emulator to start up and run and shut
down.

186
00:11:58,680 --> 00:12:02,080
Also some features are not well supported
by the emulator.

187
00:12:02,080 --> 00:12:05,420
For instance, there is no support for
bluetooth connectivity and no

188
00:12:05,420 --> 00:12:10,430
support for connecting accessories to the
emulator via a USB cable.

189
00:12:10,430 --> 00:12:12,090
Also, some software

190
00:12:12,090 --> 00:12:14,490
features aren't available at by default in
the

191
00:12:14,490 --> 00:12:18,190
emulator, so certain applications won't
run on it.

192
00:12:18,190 --> 00:12:23,450
And finally, at the end of the day, the
emulator is not a device.

193
00:12:23,450 --> 00:12:26,510
You can't know how your application is
going to look and perform

194
00:12:26,510 --> 00:12:31,090
on an actual device just by seeing it on
an emulator.

195
00:12:31,090 --> 00:12:37,140
Let's take a look at some of the advanced
features that the emulator supports.

196
00:12:37,140 --> 00:12:39,690
For instance, you can configure the
emulator to

197
00:12:39,690 --> 00:12:44,310
emulate the speed and latency of different
cellular networks.

198
00:12:44,310 --> 00:12:48,110
You can configure the emulator to emulate
different battery states, such as

199
00:12:48,110 --> 00:12:52,740
whether you're running low on battery
power, or currently charging the device.

200
00:12:52,740 --> 00:12:55,580
You can also inject mock location
coordinates to

201
00:12:55,580 --> 00:12:58,280
make testing of location or applications
much easier.

202
00:12:59,320 --> 00:13:02,280
And typically, these features help to test
code that

203
00:13:02,280 --> 00:13:05,240
must respond to environment events.

204
00:13:05,240 --> 00:13:07,770
For instance, applications are often
designed to

205
00:13:07,770 --> 00:13:10,150
do different things, depending on the
battery level.

206
00:13:13,070 --> 00:13:16,820
Let me show you how easy this is.
Here I'm showing a terminal window.

207
00:13:16,820 --> 00:13:19,800
And an emulator running on a virtual
device.

208
00:13:19,800 --> 00:13:22,899
In the terminal window, I'll use telnet to
connect to the emulator.

209
00:13:23,950 --> 00:13:27,450
You can see port number on which the
emulator's listening in that

210
00:13:27,450 --> 00:13:31,080
emulator's window title bar.
And in this case that's 5554.

211
00:13:31,080 --> 00:13:39,350
So I'll type telnet local host 5554.
Now I'll set

212
00:13:39,350 --> 00:13:42,750
the network charactersitics to emulate a
slower edge network.

213
00:13:44,730 --> 00:13:48,190
I'll type network, speed, edge.

214
00:13:48,190 --> 00:13:50,230
And notice that the cellular network
status

215
00:13:50,230 --> 00:13:53,670
icon in the notification bar has now
changed.

216
00:13:54,900 --> 00:13:57,200
Now I'll change it back to 3G network
speed.

217
00:14:01,220 --> 00:14:03,730
And now I'll change the battery status to
reflect

218
00:14:03,730 --> 00:14:05,619
a phone that is running out of battery
power.

219
00:14:06,720 --> 00:14:08,900
I'll type in power, capacity 5.

220
00:14:08,900 --> 00:14:13,300
And again you can see that the battery
status indicator in

221
00:14:13,300 --> 00:14:18,490
the notification bar is changed to reflect
the lower battery level.

222
00:14:18,490 --> 00:14:24,190
Now I'll change the charging status to
indicate that the phone is not plugged in.

223
00:14:24,190 --> 00:14:26,890
I'll type power status

224
00:14:26,890 --> 00:14:28,677
not charging.

225
00:14:28,677 --> 00:14:30,173
And again as you can see the

226
00:14:30,173 --> 00:14:33,233
battery status indicator no longer shows a
lightning

227
00:14:33,233 --> 00:14:35,817
bolt, and has changed color to indicate
that

228
00:14:35,817 --> 00:14:38,610
the device is almost completely out of
power.

229
00:14:40,170 --> 00:14:43,810
Also if I open the maps application you
can see

230
00:14:43,810 --> 00:14:48,550
that the emulator thinks that I'm
currently somewhere near Washington DC.

231
00:14:55,290 --> 00:15:01,658
However, I can change that by inputting a
new set of location coordinates like so,

232
00:15:01,658 --> 00:15:07,720
geo fix 0.00 40.00 and as you can see

233
00:15:10,500 --> 00:15:14,470
the maps application now shows that I've
been

234
00:15:14,470 --> 00:15:17,460
transported somewhere near a beach in
sunny Spain.

235
00:15:17,460 --> 00:15:18,500
The An, the

236
00:15:20,710 --> 00:15:24,600
Android emulator also allows you to
emulate network interactions

237
00:15:24,600 --> 00:15:27,470
such as receiving a phone call or a SMS
message.

238
00:15:29,530 --> 00:15:33,360
Back in the terminal window, I'll
reconnect to the emulator over telnet.

239
00:15:34,400 --> 00:15:39,185
And then, I'll give the emulator a command
which will cause it to emulate an incoming

240
00:15:39,185 --> 00:15:44,520
SMS message.
That command is sms send followed by the

241
00:15:44,520 --> 00:15:50,770
sender's phone number, 3015555555.

242
00:15:50,770 --> 00:15:54,550
And then the text message.
In this case, this is

243
00:15:54,550 --> 00:15:56,380
a text message.

244
00:15:56,380 --> 00:16:00,620
Now, keep your eye on the emulator window
to see what happens when I hit Return.

245
00:16:07,020 --> 00:16:09,060
And as you can see, the emulator's
notification

246
00:16:09,060 --> 00:16:13,180
bar now contains a notification,
indicating that the

247
00:16:13,180 --> 00:16:18,030
emulated phone just received the SMS
message and

248
00:16:18,030 --> 00:16:20,010
we can pull down on the notification bar.

249
00:16:24,900 --> 00:16:29,380
And then start messaging application to
get a closer look at that SMS message.

250
00:16:37,170 --> 00:16:40,260
Android also allows two emulators to
interact with each other.

251
00:16:43,700 --> 00:16:47,720
Here I'm showing two emulator instances
running, in one

252
00:16:47,720 --> 00:16:51,540
I'll open the phone application and start
to dial the number of

253
00:16:51,540 --> 00:16:55,150
the second.
The number of the second

254
00:16:55,150 --> 00:16:59,060
emulator is the port number shown at the
top of that emulator.

255
00:17:00,100 --> 00:17:09,335
In this case, 5554.
Now you can see that the second

256
00:17:09,335 --> 00:17:17,500
emulator has received the call.
And is ringing its user.

257
00:17:18,780 --> 00:17:25,230
So I'll pick up the incoming call in the
second emulator, and as you can see, now

258
00:17:25,230 --> 00:17:30,440
the first emulator's interface has changed
to reflect that the call is connected.

259
00:17:31,560 --> 00:17:34,580
Now, if one of the parties hits the Hold
button,

260
00:17:34,580 --> 00:17:37,320
that will also be reflected in both phone
applications.

261
00:17:38,690 --> 00:17:42,605
And once the users are done with the call,
I can hang up

262
00:17:42,605 --> 00:17:48,615
one of the emulators and both emulators
show that the call has been disconnected.

263
00:17:48,615 --> 00:17:52,570
And of course that' just a few of the many
things that you can do with the emulator.

264
00:17:52,570 --> 00:17:56,020
There are many, many other interesting
features as well and if you want to know

265
00:17:56,020 --> 00:17:59,770
more I would recommend that you take a
look at the emulator page, on an,

266
00:17:59,770 --> 00:18:01,600
on the Android developer's website.

